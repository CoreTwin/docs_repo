#!/usr/bin/env python3

import os
import sys
import json
import shutil
sys.path.insert(0, '.')

from update_docs.core import (
    detect_author_type_enhanced,
    check_generator_registry,
    scan_for_generator_functions,
    update_content_system
)

def test_enhanced_generator_detection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤"""
    print("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ ===")
    
    print("\n1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    os.system("python example_doc_generator.py")
    
    print("\n2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∞–≤—Ç–æ—Ä—Å—Ç–≤–∞ –ø–æ –º–∞—Ä–∫–µ—Ä–∞–º...")
    test_files = [
        "docs/auto_generated/api_documentation.md",
        "docs/auto_generated/CHANGELOG_AUTO.md",
        "docs/auto_generated/metrics_report.md"
    ]
    
    for file_path in test_files:
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            author_type, source = detect_author_type_enhanced(file_path, content)
            print(f"  {file_path}:")
            print(f"    –ê–≤—Ç–æ—Ä: {author_type}")
            print(f"    –ò—Å—Ç–æ—á–Ω–∏–∫: {source}")
            print(f"    –û–∂–∏–¥–∞–µ—Ç—Å—è: generator")
            print(f"    ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ" if author_type == "generator" else "‚ùå –û—à–∏–±–∫–∞")
    
    print("\n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–µ—Å—Ç—Ä–∞ –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤...")
    registry_check = check_generator_registry("docs/auto_generated/api_documentation.md")
    print(f"  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–µ—Å—Ç—Ä–∞: {'‚úÖ –ù–∞–π–¥–µ–Ω' if registry_check else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω'}")
    
    print("\n4. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –∫–æ–¥–æ–≤–æ–π –±–∞–∑–µ...")
    generator_functions = scan_for_generator_functions()
    print(f"  –ù–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π-–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(generator_functions)}")
    
    for func in generator_functions:
        print(f"    - {func['function']} –≤ {func['file']}")
    
    print("\n5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Content.json...")
    update_content_system('docs', 'content/Content.json', 'content/Description_for_agents.md')
    
    if os.path.exists('content/Content.json'):
        with open('content/Content.json', 'r', encoding='utf-8') as f:
            content_data = json.load(f)
        
        generator_files = [entry for entry in content_data if entry.get('author') == 'generator']
        print(f"  –§–∞–π–ª–æ–≤ —Å –∞–≤—Ç–æ—Ä—Å—Ç–≤–æ–º 'generator' –≤ Content.json: {len(generator_files)}")
        
        for entry in generator_files:
            editable = entry.get('editable', True)
            print(f"    - {entry['path']}: editable={editable}")
            if not editable:
                print(f"      ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞—â–∏—â–µ–Ω –æ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            else:
                print(f"      ‚ùå –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞—â–∏—â–µ–Ω –æ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    print("\n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ Description_for_agents.md...")
    if os.path.exists('content/Description_for_agents.md'):
        with open('content/Description_for_agents.md', 'r', encoding='utf-8') as f:
            desc_content = f.read()
        
        has_generator_icon = '‚öôÔ∏è' in desc_content
        has_lock_icon = 'üîí' in desc_content
        
        print(f"  –ò–∫–æ–Ω–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ (‚öôÔ∏è): {'‚úÖ –ù–∞–π–¥–µ–Ω–∞' if has_generator_icon else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
        print(f"  –ò–∫–æ–Ω–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (üîí): {'‚úÖ –ù–∞–π–¥–µ–Ω–∞' if has_lock_icon else '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞'}")
    
    print("\n=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ ===")

def cleanup_test_files():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    if os.path.exists("docs/auto_generated"):
        shutil.rmtree("docs/auto_generated")
        print("  ‚úÖ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞ docs/auto_generated")

if __name__ == "__main__":
    try:
        test_enhanced_generator_detection()
        
        response = input("\n–û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã? (y/n): ")
        if response.lower() in ['y', 'yes', '–¥–∞', '–¥']:
            cleanup_test_files()
        else:
            print("–¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
